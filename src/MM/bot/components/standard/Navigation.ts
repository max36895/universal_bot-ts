/**
 * –ö–ª–∞—Å—Å, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º –º–µ–Ω—é.
 * Class Navigation
 * @package bot\components\standard
 */
import {Text} from "./Text";

export class Navigation {
    public STANDARD_NEXT_TEXT: string[] = ['–¥–∞–ª—å—à–µ', '–≤–ø–µ—Ä–µ–¥'];
    public STANDARD_OLD_TEXT: string[] = ['–Ω–∞–∑–∞–¥'];

    /**
     * –ï—Å–ª–∏ true, —Ç–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
     * @var bool $isUsedStandardText –ï—Å–ª–∏ true, —Ç–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
     */
    public isUsedStandardText: boolean;
    /**
     * –ú–∞—Å—Å–∏–≤ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤–ø–µ—Ä–µ–¥.
     * @var nextText –ú–∞—Å—Å–∏–≤ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤–ø–µ—Ä–µ–¥.
     */
    public nextText: string[];
    /**
     * –ú–∞—Å—Å–∏–≤ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥.
     * @var oldText –ú–∞—Å—Å–∏–≤ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥.
     */
    public oldText: string[];
    /**
     * –ú–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
     * @var elements –ú–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
     */
    public elements: any[];
    /**
     * (default 5) –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
     * @var maxElement (default 5) –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
     */
    public maxElement: number;
    /**
     * (default 0) –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ª—É—á–∞—Ç—å —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏—è.
     * @var int $thisPage (default 0) –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ª—É—á–∞—Ç—å —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏—è.
     */
    public thisPage: number;

    /**
     * Navigation constructor.
     * @param maxElement –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
     */
    public constructor(maxElement: number = 5) {
        this.isUsedStandardText = true;
        this.nextText = [];
        this.oldText = [];
        this.elements = [];
        this.maxElement = maxElement;
        this.thisPage = 0;
    }

    /**
     * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ –ø–æ –º–∞—Å—Å–∏–≤—É.
     *
     * @param text –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å.
     * @return boolean
     * @api
     */
    public isNext(text: string): boolean {
        let nextText: string[];
        if (this.isUsedStandardText) {
            nextText = [...this.nextText, ...this.STANDARD_NEXT_TEXT];
        } else {
            nextText = this.nextText;
        }
        return Text.isSayText(nextText, text);
    }

    /**
     * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –Ω–∞–∑–∞–¥ –ø–æ –º–∞—Å—Å–∏–≤—É.
     *
     * @param text –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å.
     * @return boolean
     * @api
     */
    public isOld(text: string): boolean {
        let oldText: string[];
        if (this.isUsedStandardText) {
            oldText = [...this.oldText, ...this.STANDARD_OLD_TEXT];
        } else {
            oldText = this.oldText;
        }
        return Text.isSayText(oldText, text);
    }

    /**
     * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.
     * –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤–µ—Ä–Ω–µ—Ç true.
     *
     * @param text –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å.
     * @return boolean
     */
    public numberPage(text: string): boolean {
        const data = text.match(/((-|)\d) —Å—Ç—Ä–∞–Ω–∏/umi);
        if (data) {
            this.thisPage = +data[1] - 1;
            const maxPage = this.getMaxPage();
            if (this.thisPage >= maxPage) {
                this.thisPage = maxPage - 1;
            }
            if (this.thisPage < 0) {
                this.thisPage = 0;
            }
            return true;
        }
        return false;
    }

    /**
     * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.
     * –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤–µ—Ä–Ω–µ—Ç true.
     *
     * @param text –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å.
     * @return boolean
     */
    protected _nextPage(text: string): boolean {
        if (this.isNext(text)) {
            this.thisPage++;
            const maxPage = this.getMaxPage();
            if (this.thisPage >= maxPage) {
                this.thisPage = maxPage - 1;
            }
            return true;
        }
        return false;
    }

    /**
     * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.
     * –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤–µ—Ä–Ω–µ—Ç true.
     *
     * @param text –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å.
     * @return boolean
     */
    protected _oldPage(text: string): boolean {
        if (this.isOld(text)) {
            this.thisPage--;
            if (this.thisPage < 0) {
                this.thisPage = 0;
            }
            return true;
        }
        return false;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è.
     *
     * @param elements –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
     * @param text –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å.
     * @return any[]
     * @api
     */
    public nav(elements: any[] = null, text: string = ''): any[] {
        const showElements: object[] = [];
        if (elements) {
            this.elements = elements;
        }
        this._nextPage(text);
        this._oldPage(text);
        const start = this.thisPage * this.maxElement;
        for (let i = start; i < (start + this.maxElement); i++) {
            if (typeof this.elements[i] !== 'undefined') {
                showElements.push(this.elements[i]);
            }
        }
        return showElements;
    }

    /**
     * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –Ω–∞ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
     *
     * @param elements –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
     * @param text –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å.
     * @param key –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –∫–ª—é—á—É –º–∞—Å—Å–∏–≤–∞. –ï—Å–ª–∏ null, —Ç–æ–≥–¥–∞ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω –º–∞—Å—Å–∏–≤ –∏–∑ —Å—Ç—Ä–æ–∫.
     * @param thisPage –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.
     * @return any
     * @api
     */
    public selectedElement(elements: any[] = null, text: string = '', key: string[] | string = null, thisPage: number = null) {
        if (thisPage !== null) {
            this.thisPage = thisPage;
        }
        if (elements) {
            this.elements = elements;
        }

        let number: number = null;
        const data = text.match(/(\d)/umi);
        if (data) {
            number = +data[0][0];
        }

        const start: number = this.thisPage * this.maxElement;
        let index: number = 1;
        let selectElement: object = null;
        let maxPercent: number = 0;
        for (let i = start; i < (start + this.maxElement); i++) {
            if (typeof this.elements[i] !== 'undefined') {
                if (index == number) {
                    return this.elements[i];
                }
                if (key == null) {
                    const r = Text.textSimilarity(this.elements[i].toString(), text, 75);
                    if (r.status && r.percent > maxPercent) {
                        selectElement = this.elements[i];
                    }
                } else {
                    if (typeof key === 'object') {
                        key.forEach((k) => {
                            if (this.elements[i][k]) {
                                const r = Text.textSimilarity(this.elements[i][k], text, 75);
                                if (r.status && r.percent > maxPercent) {
                                    selectElement = this.elements[i];
                                }
                            }
                        })
                    } else {
                        if (this.elements[i][key]) {
                            const r = Text.textSimilarity(this.elements[i][key], text, 75);
                            if (r.status && r.percent > maxPercent) {
                                selectElement = this.elements[i];
                            }
                        }
                    }
                }
                index++;
                if (maxPercent > 90) {
                    return selectElement;
                }
            }
        }
        return selectElement;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
     *
     * @param isNumber –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ï—Å–ª–∏ true, —Ç–æ–≥–¥–∞ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∏ —Å —á–∏—Å–ª–æ–≤–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π.
     * @return string[]
     * @api
     */
    public getPageNav(isNumber: boolean = false): string[] {
        const maxPage: number = this.getMaxPage();
        if (this.thisPage < 0) {
            this.thisPage = 0;
        }
        if (this.thisPage > maxPage) {
            this.thisPage = maxPage - 1;
        }
        const buttons: string[] = [];
        if (isNumber == false) {
            if (this.thisPage) {
                buttons.push('üëà –ù–∞–∑–∞–¥');
            }
            if ((this.thisPage + 1) < maxPage) {
                buttons.push('–î–∞–ª—å—à–µ üëâ');
            }
        } else {
            let index: number = this.thisPage - 2;
            if (index < 0) {
                index = 0;
            }
            let count: number = 0;
            for (let i = index; i < maxPage; i++) {
                if (i == this.thisPage) {
                    buttons.push(`[${i + 1}]`);
                } else {
                    buttons.push(`${i + 1}`);
                }
                count++;
                if (count > 4) {
                    break;
                }
            }
        }
        return buttons;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     *
     * @return string
     * @api
     */
    public getPageInfo(): string {
        if ((typeof this.elements[this.thisPage * this.maxElement] === 'undefined') || this.thisPage < 0) {
            this.thisPage = 0;
        }
        let pageInfo: string = (this.thisPage + 1) + ' —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑ ';
        const maxPage: number = this.getMaxPage();
        if (maxPage > 1) {
            pageInfo += maxPage;
        } else {
            pageInfo = '';
        }
        return pageInfo;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü.
     *
     * @param elements –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
     * @return number
     * @api
     */
    public getMaxPage(elements: any[] = null): number {
        if (elements) {
            this.elements = elements;
        }
        if (typeof this.elements === 'object') {
            const countEl: number = this.elements.length;
            let maxPage: number = Math.floor(countEl / this.maxElement);
            if (countEl % this.maxElement) {
                maxPage++;
            }
            return maxPage;
        }
        return 0;
    }
}
